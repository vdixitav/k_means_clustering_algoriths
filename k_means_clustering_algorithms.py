# -*- coding: utf-8 -*-
"""K means Clustering Algorithms.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RMPyYhlWa1qCmstiBsHryGL0iiy0JaeZ
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
import pandas as pd
import numpy as np
# %matplotlib inline

X,Y=make_blobs(n_samples=1000 ,centers=3 ,n_features=2)

X

Y

plt.scatter(X[:,0],X[:,1],c=Y)

## Stndardization---feature scaler technique
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, Y, test_size=0.33, random_state=42)

X_train_scale=scaler.fit(X_train)
X_test_split=scaler.transform(X_test)

from sklearn.cluster import KMeans

X_train_scaled=scaler.fit_transform(X_train)
X_test_scaled=scaler.transform(X_test)

# Elbow method

wcss=[]
for k in range(1,11):
  kmeans=KMeans(n_clusters=k ,init="k-means++")
  kmeans.fit(X_train_scaled)
  wcss.append(kmeans.inertia_)

wcss

## plot elbow curve

plt.plot(range(1,11),wcss)
plt.xticks(range(1,11))
plt.xlabel("Number of Cluster")
plt.ylabel("wcss")
plt.show()

kmeans=KMeans(n_clusters=3 ,init="k-means++")

kmeans.fit_predict(X_train_scaled)

y_pred=kmeans.predict(X_test_scaled)

plt.scatter(X_test[:,0],X_test[:,1],c=y_pred)

# validating K value

# kneelocator
#Silhoutee scoring

#knee locator

! pip install kneed

from kneed import KneeLocator

kl=KneeLocator(range(1,11),wcss,curve="convex",direction="decreasing")

kl.elbow

# silhoutte score
from sklearn.metrics import silhouette_score

silhouette_coefficient=[]
for k in range(2,11):
  kmeans=KMeans(n_clusters=k,init="k-means++")
  kmeans.fit(X_train_scaled)
  score=silhouette_score(X_train_scaled,kmeans.labels_)
  silhouette_coefficient.append(score)

silhouette_coefficient

plt.plot(range(2,11),silhouette_coefficient)
plt.xticks(range(2,11))
plt.xlabel("Number of Cluster")
plt.ylabel("silhouette_coefficient")
plt.show()

